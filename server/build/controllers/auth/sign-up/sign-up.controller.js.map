{"version":3,"sources":["../src/controllers/auth/sign-up/sign-up.controller.ts"],"names":[],"mappings":";;AAEA,wDAAkD;AAClD,mDAAoE;AACpE,gEAAuD;AACvD,uCAAuC;AAKvC,uBAA8B,GAAY,EAAE,GAAa,EAAE,IAAkB;IAC3E,MAAM,MAAM,GAAW,wBAAgB,CAAE,GAAG,CAAC,CAAC;IAC9C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,uBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAY,EAAE,EAAE;QACtD,MAAM,UAAU,GAAQ;YACpB,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK;YACrB,YAAY,EAAE,IAAI;SACrB,CAAC;QACF,MAAM,CAAC,oBAAO,CAAC,UAAU,CAAC,UAAU,CAAC;aACpC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAClB,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC,CAChE;aACA,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAChB,EAAE,CAAC,CAAC,GAAG,YAAY,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAEjC,EAAE,CAAA,CAAC,GAAG,CAAC,IAAI,KAAM,gCAAgC,CAAC,CAAC,CAAC;oBAChD,MAAM,WAAW,GAAsB;wBACnC,SAAS,EAAE,GAAG;wBACd,OAAO,EAAE,sBAAsB;qBAClC,CAAC;oBACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC;AA/BD,sCA+BC","file":"sign-up.controller.js","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport * as Bluebird from \"bluebird\";\r\nimport { UserDao } from \"../../../dao/_index.dao\";\r\nimport { Result, validationResult  } from \"express-validator/check\";\r\nimport { getHash } from \"../../../utils/bcrypter.util\";\r\nimport * as sequelize from \"sequelize\";\r\nimport { ISeqlzErrorObject } from \"../../../utils/interfaces/sqlzError.interface\";\r\n\r\n\r\n\r\nexport function createNewUser(req: Request, res: Response, next: NextFunction): Response | Bluebird<any> {\r\n  const errors: Result = validationResult (req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(422).json({ errors: errors.mapped() });\r\n  }\r\n\r\n  return getHash(req.body.password).then((hash: string) => {\r\n    const newUserObj: any = {\r\n        email: req.body.email,\r\n        passwordHash: hash\r\n    };\r\n    return UserDao.createUser(newUserObj)\r\n    .then((user: any) =>\r\n      res\r\n        .status(200)\r\n        .send({ author: user, message: \"User created successfully\" })\r\n    )\r\n    .catch((err: any) => {\r\n        if (err instanceof sequelize.Error) {\r\n            // handle more instances of sequelize specific errors here\r\n            if(err.name ===  \"SequelizeUniqueConstraintError\") {\r\n                const newErrorObj: ISeqlzErrorObject = {\r\n                    errorCode: 400,\r\n                    message: \"Email already exists\"\r\n                };\r\n                return res.json(newErrorObj);\r\n            }\r\n        }\r\n    });\r\n  });\r\n\r\n}\r\n"],"sourceRoot":"../../../../src"}