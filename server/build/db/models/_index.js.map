{"version":3,"sources":["../src/db/models/_index.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAC7B,uCAAuC;AAEvC,MAAM,MAAM,GAAQ,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAW7D,IAAI,EAAE,GAAQ,EAAE,CAAC;AAKjB,MAAM,QAAQ,GAAQ,MAAM,CAAC,WAAW,CAAC;AAGzC,MAAM,SAAS,GAAwB,IAAI,SAAS,CAClD,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CACT,CAAC;AAEF,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAExD,EAAE;KACC,WAAW,CAAC,SAAS,CAAC;KACtB,MAAM,CAAC,UAAS,IAAY;IAC3B,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;AACxF,CAAC,CAAC;KACD,OAAO,CAAC,UAAS,IAAY;IAC5B,MAAM,KAAK,GAAQ,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IAChE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AACzB,CAAC,CAAC,CAAC;AAEL,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAS,SAAiB;IAChD,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5B,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,SAAS,GAAG,SAAS,CAAC;AACzB,EAAE,CAAC,SAAS,GAAG,SAAS,CAAC;AAEzB,kBAA8B,EAAE,CAAC","file":"_index.js","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as Sequelize from \"sequelize\";\n\nconst config: any = require(\"../../../config/database.json\");\n\nimport { IAuthorInstance, IAuthorAttributes } from \"./authors\";\nimport { IBookInstance, IBookAttributes } from \"./books\";\nimport { ITagInstance, ITagAttributes } from \"./tags\";\n\ninterface IDbConnection {\n  Author: Sequelize.Model<IAuthorInstance, IAuthorAttributes>;\n  Book: Sequelize.Model<IBookInstance, IBookAttributes>;\n}\n\nlet db: any = {};\n\n\n// const dbConfig = config[process.env.NODE_ENV]\n\nconst dbConfig: any = config.development;\n\n\nconst sequelize: Sequelize.Sequelize = new Sequelize(\n  dbConfig.database,\n  dbConfig.username,\n  dbConfig.password,\n  dbConfig\n);\n\nconst basename: string = path.basename(module.filename);\n\nfs\n  .readdirSync(__dirname)\n  .filter(function(file: string): boolean {\n    return (file.indexOf(\".\") !== 0) && (file !== basename) && (file.slice(-3) === \".js\");\n  })\n  .forEach(function(file: string): void {\n    const model: any = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(function(modelName: string): void {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default <IDbConnection>db;\n\n\n"],"sourceRoot":"../../../src"}